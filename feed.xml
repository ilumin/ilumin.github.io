<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en, th"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://ilumin.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ilumin.github.io/" rel="alternate" type="text/html" hreflang="en, th"/><updated>2024-07-11T07:14:18+00:00</updated><id>https://ilumin.github.io/feed.xml</id><title type="html">Hi, I‚Äôm Lumin. üôá‚Äç‚ôÇÔ∏è</title><subtitle>A simple blog for Lumin. </subtitle><entry><title type="html">Type Assertion</title><link href="https://ilumin.github.io/blog/2024/type-assertion/" rel="alternate" type="text/html" title="Type Assertion"/><published>2024-07-11T00:00:00+00:00</published><updated>2024-07-11T00:00:00+00:00</updated><id>https://ilumin.github.io/blog/2024/type-assertion</id><content type="html" xml:base="https://ilumin.github.io/blog/2024/type-assertion/"><![CDATA[<p>‡πÇ‡∏î‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏ß‡∏≤‡∏• JS ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">assertNumber</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="k">typeof</span> <span class="nx">value</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">number</span><span class="dl">"</span><span class="p">)</span> 
    <span class="k">throw</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Expected value to be number</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <p>‡πÉ‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏ß‡∏≤‡∏• TS ‡πÄ‡∏£‡∏≤‡∏Å‡πá‡πÉ‡∏ä‡πâ implementation code ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡πÜ‡∏Å‡∏±‡∏ô‡πÅ‡∏´‡∏•‡∏∞ ‡πÅ‡∏ï‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏∑‡∏≠ type ‡∏Ç‡∏≠‡∏á function ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∞‡πÑ‡∏£</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">assertNumber</span><span class="p">(</span><span class="nx">val</span><span class="p">:</span> <span class="kr">any</span><span class="p">):</span> <span class="nx">asserts</span> <span class="nx">val</span> <span class="k">is</span> <span class="kr">number</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="k">typeof</span> <span class="nx">value</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">number</span><span class="dl">"</span><span class="p">)</span> 
    <span class="k">throw</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Expected value to be number</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="typescript"/><summary type="html"><![CDATA[‡∏ó‡∏≥ type assertion ‡∏î‡πâ‡∏ß‡∏¢ TS]]></summary></entry><entry><title type="html">SheBang!</title><link href="https://ilumin.github.io/blog/2024/shebang/" rel="alternate" type="text/html" title="SheBang!"/><published>2024-07-04T00:00:00+00:00</published><updated>2024-07-04T00:00:00+00:00</updated><id>https://ilumin.github.io/blog/2024/shebang</id><content type="html" xml:base="https://ilumin.github.io/blog/2024/shebang/"><![CDATA[<h1 id="til-shebang">TIL: SheBang!</h1> <p>‡πÑ‡∏î‡πâ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ <code class="language-plaintext highlighter-rouge">#!</code> ‡πÄ‡∏õ‡πá‡∏ô code ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏≠‡∏≤‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÉ‡∏ô line ‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á file ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏≤‡πÑ‡∏õ‡∏£‡∏±‡∏ô‡πÉ‡∏ô cli</p> <p>‡πÄ‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏™‡∏¥‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤ <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">SheBang!</a></p>]]></content><author><name></name></author><category term="etc"/><summary type="html"><![CDATA[SheBang ‡∏≠‡∏±‡∏•‡∏•‡∏±‡∏¢‡∏¢‡πå]]></summary></entry><entry><title type="html">Set Path Alias for NestJS and Jest</title><link href="https://ilumin.github.io/blog/2024/nest-jest-path-alias/" rel="alternate" type="text/html" title="Set Path Alias for NestJS and Jest"/><published>2024-07-03T00:00:00+00:00</published><updated>2024-07-03T00:00:00+00:00</updated><id>https://ilumin.github.io/blog/2024/nest-jest-path-alias</id><content type="html" xml:base="https://ilumin.github.io/blog/2024/nest-jest-path-alias/"><![CDATA[<h2 id="the-problem">The Problem</h2> <p>NestJS didn‚Äôt configure path aliases by default. When we create a unit test that might need to import another file, we‚Äôll have to import with a weird long path, e.g., <code class="language-plaintext highlighter-rouge">../../services</code>.</p> <p>I‚Äôm a lazy bastard; I just want to do something easy.</p> <h2 id="the-solution">The Solution</h2> <p>First, add <code class="language-plaintext highlighter-rouge">paths</code> inside ‚ÄòcompilerOptions‚Äô to set the TypeScript path alias at <code class="language-plaintext highlighter-rouge">tsconfig.json</code>.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">...</span><span class="w"> </span><span class="err">tsconfig's</span><span class="w"> </span><span class="err">stuff</span><span class="w">
    </span><span class="nl">"paths"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"@@/*"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"src/*"</span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>This configuration means that TS will understand that <code class="language-plaintext highlighter-rouge">import { services } from '@@/services'</code> is the same as <code class="language-plaintext highlighter-rouge">import { services } from 'src/services'</code>.</p> <p>Cool! However, there are still some issues with the test.</p> <p>Second, let‚Äôs configure Jest in <code class="language-plaintext highlighter-rouge">package.json</code> by adding <code class="language-plaintext highlighter-rouge">moduleNameMapper</code> inside ‚Äòjest‚Äô.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="err">//</span><span class="w"> </span><span class="err">...</span><span class="w"> </span><span class="err">package.json's</span><span class="w"> </span><span class="err">stuff</span><span class="w">
  </span><span class="nl">"jest"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">...</span><span class="w"> </span><span class="err">jest's</span><span class="w"> </span><span class="err">stuff</span><span class="w">
    </span><span class="nl">"rootDir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"src"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"moduleNameMapper"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"@@/(.*)$"</span><span class="p">:</span><span class="w"> </span><span class="s2">"&lt;rootDir&gt;/$1"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>This configuration means that Jest will understand that <code class="language-plaintext highlighter-rouge">import { services } from '@@/services'</code> is the same as <code class="language-plaintext highlighter-rouge">import { services } from 'src/services'</code>.</p> <p>Now, we can use path aliases in NestJS and Jest instead of using a full, weird, long path.</p>]]></content><author><name></name></author><category term="nest,"/><category term="jest"/><summary type="html"><![CDATA[Always forgot how to do it]]></summary></entry><entry><title type="html">The ? Operator in Rust</title><link href="https://ilumin.github.io/blog/2024/question-operator-in-rust/" rel="alternate" type="text/html" title="The ? Operator in Rust"/><published>2024-06-24T00:00:00+00:00</published><updated>2024-06-24T00:00:00+00:00</updated><id>https://ilumin.github.io/blog/2024/question-operator-in-rust</id><content type="html" xml:base="https://ilumin.github.io/blog/2024/question-operator-in-rust/"><![CDATA[<p>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô code ‡∏Ç‡∏≠‡∏á Rust ‡πÄ‡∏£‡∏≤‡∏°‡∏±‡∏Å‡∏à‡∏∞‡πÄ‡∏à‡∏≠ <code class="language-plaintext highlighter-rouge">?</code> ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡πà‡∏≠‡∏¢‡πÜ ‡πÄ‡∏ä‡πà‡∏ô</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">read_file</span><span class="p">(</span><span class="n">filename</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span> <span class="nn">std</span><span class="p">::</span><span class="nn">io</span><span class="p">::</span><span class="n">Error</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">contents</span> <span class="o">=</span> <span class="nn">std</span><span class="p">::</span><span class="nn">fs</span><span class="p">::</span><span class="nf">read_to_string</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="o">?</span><span class="p">;</span> <span class="c1">// ? used here</span>
    <span class="nf">Ok</span><span class="p">(</span><span class="n">contents</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">?</code> ‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô ‡∏Ñ‡∏∑‡∏≠ syntactic sugar (‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á syntax ‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡πÜ ‡πÄ‡∏ä‡πà‡∏ô‡∏Ç‡∏≠‡∏á JS ‡∏à‡∏∞‡∏°‡∏µ <code class="language-plaintext highlighter-rouge">[...array]</code>)</p> <p>‡∏ã‡∏∂‡πà‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ <code class="language-plaintext highlighter-rouge">?</code> ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">read_file</span><span class="p">(</span><span class="n">filename</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span> <span class="nn">std</span><span class="p">::</span><span class="nn">io</span><span class="p">::</span><span class="n">Error</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="nn">std</span><span class="p">::</span><span class="nn">fs</span><span class="p">::</span><span class="nf">read_to_string</span><span class="p">(</span><span class="n">filename</span><span class="p">);</span>

    <span class="k">match</span> <span class="n">result</span> <span class="p">{</span>
        <span class="nf">Ok</span><span class="p">(</span><span class="n">contents</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">contents</span><span class="p">),</span>  <span class="c1">// Success: Return the file contents wrapped in Ok</span>
        <span class="nf">Err</span><span class="p">(</span><span class="n">err</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="nf">Err</span><span class="p">(</span><span class="n">err</span><span class="p">),</span>          <span class="c1">// Error: Return the error directly</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤ <code class="language-plaintext highlighter-rouge">?</code> ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏Ç‡∏≠‡∏á code ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ result ‡∏à‡∏≤‡∏Å function ‡∏°‡∏µ error ‡πÑ‡∏´‡∏°</p>]]></content><author><name></name></author><category term="rust"/><summary type="html"><![CDATA[What the hell is it?]]></summary></entry><entry><title type="html">Software is Eating the World</title><link href="https://ilumin.github.io/blog/2024/software-is-eating-the-world/" rel="alternate" type="text/html" title="Software is Eating the World"/><published>2024-06-21T00:00:00+00:00</published><updated>2024-06-21T00:00:00+00:00</updated><id>https://ilumin.github.io/blog/2024/software-is-eating-the-world</id><content type="html" xml:base="https://ilumin.github.io/blog/2024/software-is-eating-the-world/"><![CDATA[<blockquote> <p>Software is eating the world.</p> </blockquote> <p>‡πÄ‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô software ‡πÑ‡∏õ‡∏´‡∏°‡∏î ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏Å‡πá‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏°‡∏±‡∏ô ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏±‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡πÇ‡∏•‡∏Å</p> <p>‡πÅ‡∏ï‡πà‡∏°‡∏±‡∏ô‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏ß‡πà‡∏≤ software ‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏î‡∏µ) ‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏¥‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÑ‡∏î‡πâ‡∏à‡∏ô‡∏´‡∏°‡∏î‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô</p>]]></content><author><name></name></author><category term="etc"/><summary type="html"><![CDATA[It might eats you too]]></summary></entry><entry><title type="html">What‚Äôs End-to-End Testing (E2E testing)</title><link href="https://ilumin.github.io/blog/2024/whats-e2e-test/" rel="alternate" type="text/html" title="What‚Äôs End-to-End Testing (E2E testing)"/><published>2024-06-14T00:00:00+00:00</published><updated>2024-06-14T00:00:00+00:00</updated><id>https://ilumin.github.io/blog/2024/whats-e2e-test</id><content type="html" xml:base="https://ilumin.github.io/blog/2024/whats-e2e-test/"><![CDATA[<blockquote> <p>End-to-end testing is a software methodology that assesses the operation of an application from beginning to end, simulating real-world user scenarios. It involves testing the entire software system, including all its components, integrations, and interfaces, to ensure that it functions as expected under realistic conditions. ‚Äì ChatGPT</p> </blockquote> <p>AI ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£ test software ‡∏à‡∏≤‡∏Å<strong>‡∏ï‡πâ‡∏ô‡∏à‡∏ô‡∏à‡∏ö</strong> (from beginning to end) ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÜ‡∏Ç‡∏≠‡∏á user ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ó‡∏™‡∏£‡∏ß‡∏°‡πÑ‡∏õ‡∏ó‡∏±‡πâ‡∏á components, integrations, ‡πÅ‡∏•‡∏∞ interface (‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á UI)</p> <p>‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏°‡∏µ</p> <ul> <li>‡πÄ‡∏ó‡∏™‡πÇ‡∏î‡∏¢‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÜ‡∏Ç‡∏≠‡∏á user</li> <li>‡πÄ‡∏ó‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö ‡∏Ñ‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏≤‡∏£‡∏±‡∏ô</li> </ul> <h2 id="‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡πÅ‡∏£‡∏Å-‡πÄ‡∏ó‡∏™‡πÇ‡∏î‡∏¢‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÜ‡∏Ç‡∏≠‡∏á-user">‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡πÅ‡∏£‡∏Å ‚Äú‡πÄ‡∏ó‡∏™‡πÇ‡∏î‡∏¢‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÜ‡∏Ç‡∏≠‡∏á user‚Äù</h2> <p>‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡∏™‡∏ï‡∏≤‡∏° user scenario ‡∏´‡∏£‡∏∑‡∏≠ use case ‡∏ô‡∏±‡πà‡∏ô‡πÄ‡∏≠‡∏á</p> <p>‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏±‡∏ô‡∏à‡∏∂‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏Ñ‡πà‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö ‡πÅ‡∏•‡∏∞‡∏°‡∏±‡∏ô‡∏à‡∏∞‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏ô‡∏à‡∏ö user scenario ‡∏ã‡∏∂‡πà‡∏á‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ happy case ‡πÅ‡∏•‡∏∞ alternate case ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏•‡∏∞‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à</p> <h2 id="‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á-‡πÄ‡∏ó‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö-‡∏Ñ‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏≤‡∏£‡∏±‡∏ô">‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á ‚Äú‡πÄ‡∏ó‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö ‡∏Ñ‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏≤‡∏£‡∏±‡∏ô‚Äù</h2> <p>‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏¥‡∏ö‡∏°‡∏≤‡∏ñ‡∏Å‡πÄ‡∏ñ‡∏µ‡∏¢‡∏á</p> <p>‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏°‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏°‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°</p> <p>‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà</p> <h3 id="1-‡∏ó‡∏µ‡∏°-fullstack">1. ‡∏ó‡∏µ‡∏° fullstack</h3> <p>‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö end-to-end ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏ô‡∏£‡∏±‡∏ô‡πÄ‡∏ó‡∏™‡πÇ‡∏î‡∏¢‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö</p> <p>‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ó‡∏µ‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏´‡∏°‡∏î‡∏ó‡∏±‡πâ‡∏á frontend ‡πÅ‡∏•‡∏∞ backend</p> <p>‡∏ó‡∏±‡πâ‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏á‡∏≤‡∏ô ‡∏ñ‡πâ‡∏≤‡πÅ‡∏ö‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏∑‡∏≠ 1 ‡∏ó‡∏µ‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡πÉ‡∏ô 1 epic/feature/subdomain ‡∏Å‡πá‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥ E2E ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏£</p> <p>‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏µ‡πâ‡∏¢‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ epic ‡∏´‡∏£‡∏∑‡∏≠ feature ‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏µ‡∏°‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô ‡πÉ‡∏ô‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô horizontal ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ E2E ‡∏Å‡πá‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏•‡∏≥‡∏ö‡∏≤‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏ô‡∏∂‡∏á ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏°‡∏±‡∏ô‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô</p> <h3 id="2-‡∏ó‡∏µ‡∏°-frontend">2. ‡∏ó‡∏µ‡∏° frontend</h3> <p>‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö end-to-end ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô frontend app ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ mock API ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</p> <p>‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÅ‡∏£‡∏Å ‡∏Å‡πá‡∏ó‡∏µ‡∏°‡∏ó‡∏≥‡πÅ‡∏Ñ‡πà frontend ‡∏ô‡∏µ‡πà‡∏ô‡∏≤</p> <p>‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î contract ‡∏Å‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏£‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ API ‡∏≠‡∏∞‡πÑ‡∏£ ‡∏°‡∏µ request/response ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô</p> <h3 id="3-‡∏ó‡∏µ‡∏°-backend">3. ‡∏ó‡∏µ‡∏° backend</h3> <p>‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö end-to-end ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô backend app ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏ã‡∏∂‡πà‡∏á‡πÇ‡∏î‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ß‡πà‡∏≤ API testing</p> <hr/> <p>‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£ ‡∏°‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏Å‡∏•‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏° ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏≤‡∏£‡∏±‡∏ô‡∏ï‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á software ‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ</p> <p>‡∏Å‡πá‡πÄ‡∏≠‡∏≤‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏û‡∏ß‡∏Å‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÄ‡∏ñ‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö ü§£</p>]]></content><author><name></name></author><category term="etc"/><summary type="html"><![CDATA[E2E test ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£]]></summary></entry><entry><title type="html">Switch Git Submodule from HTTPS to SSH</title><link href="https://ilumin.github.io/blog/2024/switch-gitsubmodule-from-https-to-ssh/" rel="alternate" type="text/html" title="Switch Git Submodule from HTTPS to SSH"/><published>2024-06-12T00:00:00+00:00</published><updated>2024-06-12T00:00:00+00:00</updated><id>https://ilumin.github.io/blog/2024/switch-gitsubmodule-from-https-to-ssh</id><content type="html" xml:base="https://ilumin.github.io/blog/2024/switch-gitsubmodule-from-https-to-ssh/"><![CDATA[<p>I was assigned to review code in the project and found that the team use Git Submodule with HTTPS, which is require them to enter username and password every time they want to install the project.</p> <p>It might be good for them, I guess. But, it‚Äôs not good for me. I‚Äôm a lazy bastard and I hate to remember password.</p> <p>So, we should switch Git Submodule from HTTPS to SSH</p> <p>The current Git Submodule</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> .gitmodules <span class="c"># Why we call it "Git submodule", when the config is "Gitmodues"? </span>
<span class="o">[</span>submodule <span class="s2">"common"</span><span class="o">]</span>
  path <span class="o">=</span> common
  urk <span class="o">=</span> https://githost/project-repo.git
</code></pre></div></div> <p>This file tells that we can pull source code from <code class="language-plaintext highlighter-rouge">https://githost/project-repo.git</code> into path <code class="language-plaintext highlighter-rouge">common/</code> with this command</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git submodule update
</code></pre></div></div> <p>But I won‚Äôt do that because the url is HTTPS, which require me to login with username and password. I don‚Äôt want to do that since I‚Äôve SSH key.</p> <p>So, I just have to change the url into SSH</p> <div class="language-dot highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span><span class="nv">submodule</span> <span class="s2">"common"</span><span class="o">]</span>
  <span class="n">path</span> <span class="p">=</span> <span class="nv">common</span>
  <span class="n">urk</span> <span class="p">=</span> <span class="err">../</span><span class="nv">project</span><span class="err">-</span><span class="nv">repo</span><span class="err">.</span><span class="nv">git</span>
</code></pre></div></div> <p>Then run</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git submodule <span class="nb">sync 
</span>git submodule update

<span class="c"># clone submodule into common/</span>
</code></pre></div></div> <p>Now Git submodule will clone with your current access or in my case clone without asking for username and password.</p>]]></content><author><name></name></author><category term="etc"/><summary type="html"><![CDATA[I don't know who use HTTPS for git submodule and I hate to enter username password]]></summary></entry><entry><title type="html">Type of Subdomain in DDD</title><link href="https://ilumin.github.io/blog/2024/type-of-subdomain-in-ddd/" rel="alternate" type="text/html" title="Type of Subdomain in DDD"/><published>2024-06-11T00:00:00+00:00</published><updated>2024-06-11T00:00:00+00:00</updated><id>https://ilumin.github.io/blog/2024/type-of-subdomain-in-ddd</id><content type="html" xml:base="https://ilumin.github.io/blog/2024/type-of-subdomain-in-ddd/"><![CDATA[<p>‡πÉ‡∏ô DDD ‡∏ô‡∏¥‡∏¢‡∏≤‡∏° subdomain ‡πÑ‡∏ß‡πâ 3 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏∑‡∏≠</p> <ol> <li><strong>Core Subdomain</strong><br/> ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡πÇ‡∏î‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô code subdomain ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à ‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏î‡πÑ‡∏õ ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á</li> <li><strong>Generic Subdomain</strong><br/> ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏û‡∏≠‡πÜ‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö code subdomain (‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤) ‡πÅ‡∏ï‡πà‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö ‡πÄ‡∏ä‡πà‡∏ô Accounting, HR</li> <li><strong>Supporting Subdomain</strong><br/> ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡πÉ‡∏´‡πâ‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à ‡πÅ‡∏•‡∏∞‡∏ñ‡∏∂‡∏á‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ ‡∏Å‡πá‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏à‡πä‡∏á ‡πÅ‡∏Ñ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏•‡∏≥‡∏ö‡∏≤‡∏Å</li> </ol> <p>‡πÉ‡∏ô‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏≤‡∏Ñ‡∏ß‡∏£</p> <ul> <li>‡πÄ‡∏≠‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á core subdomain ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏™‡∏π‡∏á ‡πÅ‡∏•‡∏∞‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ö‡πà‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡πÑ‡∏ß</li> <li>‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥ generic subdomain ‡πÄ‡∏≠‡∏á ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á value ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏°‡∏≤‡∏Å‡∏ô‡∏±‡∏Å ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÜ‡∏Å‡∏±‡∏ô ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏ã‡∏∑‡πâ‡∏≠‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Å‡∏ß‡πà‡∏≤</li> <li>‡πÉ‡∏´‡πâ supporting subdomain ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå</li> </ul> <p>‡πÉ‡∏ô‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á architecture ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ subdomain</p> <ul> <li>‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö core subdomain ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ architecture ‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô ‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£ maintenance ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° feature ‡πÄ‡∏ä‡πà‡∏ô hexagonal architecture ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ test coverage ‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á</li> <li>‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö generic subdomain ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å software ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ integrate ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢</li> <li>‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö supporting subdomain ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ architecture ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÄ‡∏ô‡πâ‡∏ô‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</li> </ul>]]></content><author><name></name></author><category term="ddd"/><summary type="html"><![CDATA[‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á Subdomain ‡πÉ‡∏ô DDD]]></summary></entry><entry><title type="html">Document should complement code</title><link href="https://ilumin.github.io/blog/2024/document-should-complement-code/" rel="alternate" type="text/html" title="Document should complement code"/><published>2024-06-10T00:00:00+00:00</published><updated>2024-06-10T00:00:00+00:00</updated><id>https://ilumin.github.io/blog/2024/document-should-complement-code</id><content type="html" xml:base="https://ilumin.github.io/blog/2024/document-should-complement-code/"><![CDATA[<p>‚ÄúDocument should complement code‚Äù ‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤ document ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à code ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢</p> <p>‡πÅ‡∏•‡πâ‡∏ß document ‡∏°‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à code?</p> <ul> <li>‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÑ‡∏° code ‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏õ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡∏≠‡∏á code ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô</li> <li>‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ó‡∏µ‡πà code ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏¢‡∏≤‡∏Å document ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÑ‡∏î‡πâ</li> <li>‡∏ö‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£ ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞ effort ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ onboarding</li> <li>‡∏ö‡∏≠‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ô‡∏±‡πâ‡∏ô‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô (‡∏ñ‡πâ‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞‡πÑ‡∏á)</li> </ul>]]></content><author><name></name></author><category term="ddd"/><summary type="html"><![CDATA[What does it mean "document should complement code"?]]></summary></entry><entry><title type="html">Note on Rust match for option</title><link href="https://ilumin.github.io/blog/2024/match-option/" rel="alternate" type="text/html" title="Note on Rust match for option"/><published>2024-05-31T00:00:00+00:00</published><updated>2024-05-31T00:00:00+00:00</updated><id>https://ilumin.github.io/blog/2024/match-option</id><content type="html" xml:base="https://ilumin.github.io/blog/2024/match-option/"><![CDATA[<p>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ <code class="language-plaintext highlighter-rouge">match</code> ‡∏Å‡∏±‡∏ö <code class="language-plaintext highlighter-rouge">option</code></p> <div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="nn">io</span><span class="p">::</span><span class="n">stdin</span><span class="p">;</span>

<span class="k">struct</span> <span class="n">Visitor</span> <span class="p">{</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="n">greeting</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">impl</span> <span class="n">Visitor</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span><span class="p">,</span> <span class="n">greeting</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="k">Self</span> <span class="p">{</span>
        <span class="k">Self</span> <span class="p">{</span>
            <span class="n">name</span><span class="p">:</span> <span class="n">name</span><span class="nf">.to_lowercase</span><span class="p">(),</span>
            <span class="n">greeting</span><span class="p">:</span> <span class="n">greeting</span><span class="nf">.to_string</span><span class="p">(),</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">fn</span> <span class="nf">greet_visitor</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"{}"</span><span class="p">,</span> <span class="k">self</span><span class="py">.greeting</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"Hello, what's your name?"</span><span class="p">);</span>

    <span class="k">let</span> <span class="n">name</span> <span class="o">=</span> <span class="nf">what_is_your_name</span><span class="p">();</span>
    <span class="k">let</span> <span class="n">visitor_list</span> <span class="o">=</span> <span class="p">[</span>
        <span class="nn">Visitor</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="s">"bert"</span><span class="p">,</span> <span class="s">"Hello Bert, enjoy your treehouse."</span><span class="p">),</span>
        <span class="nn">Visitor</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="s">"steve"</span><span class="p">,</span> <span class="s">"Hi Steve. Your milk is in the fridge."</span><span class="p">),</span>
        <span class="nn">Visitor</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="s">"fred"</span><span class="p">,</span> <span class="s">"Wow, who invited Fred?"</span><span class="p">),</span>
    <span class="p">];</span>

    <span class="k">let</span> <span class="n">known_visitor</span> <span class="o">=</span> <span class="n">visitor_list</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.find</span><span class="p">(|</span><span class="n">visitor</span><span class="p">|</span> <span class="n">visitor</span><span class="py">.name</span> <span class="o">==</span> <span class="n">name</span><span class="p">);</span>

    <span class="k">match</span> <span class="n">known_visitor</span> <span class="p">{</span>
        <span class="nf">Some</span><span class="p">(</span><span class="n">visitor</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="n">visitor</span><span class="nf">.greet_visitor</span><span class="p">(),</span>
        <span class="nb">None</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"You are not on the visitor list. Please leave."</span><span class="p">),</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">what_is_your_name</span><span class="p">()</span> <span class="k">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">your_name</span> <span class="o">=</span> <span class="nn">String</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>

    <span class="nf">stdin</span><span class="p">()</span>
        <span class="nf">.read_line</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">your_name</span><span class="p">)</span>
        <span class="nf">.expect</span><span class="p">(</span><span class="s">"Failed to read line"</span><span class="p">);</span>

    <span class="n">your_name</span><span class="nf">.trim</span><span class="p">()</span><span class="nf">.to_lowercase</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div> <p>‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡πÄ‡∏õ‡πá‡∏ô ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà refactor ‡∏à‡∏≤‡∏Å [[2024-05-29-basic-rust]] ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏≠‡∏≤ input ‡∏°‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏•‡∏¥‡∏™‡πÑ‡∏´‡∏°</p> <p>‡∏•‡∏¥‡∏™‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡πÄ‡∏ô‡∏µ‡πà‡∏¢ ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏™‡∏Ç‡∏≠‡∏á <code class="language-plaintext highlighter-rouge">struct Visitor</code></p> <p>‡πÉ‡∏ô‡πÇ‡∏•‡∏Å‡∏Ç‡∏≠‡∏á Rust, struct ‡∏Å‡πá‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô type ‡∏´‡∏£‡∏∑‡∏≠ interface ‡πÉ‡∏ô‡πÇ‡∏•‡∏Å‡∏Ç‡∏≠‡∏á Javascript ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° behavior ‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ <code class="language-plaintext highlighter-rouge">impl Visitor</code></p> <ul> <li><code class="language-plaintext highlighter-rouge">struct Visitor</code> ‡∏°‡∏µ <code class="language-plaintext highlighter-rouge">name</code> ‡πÅ‡∏•‡∏∞ <code class="language-plaintext highlighter-rouge">greeting</code> ‡πÄ‡∏õ‡πá‡∏ô property (‡πÄ‡∏≠‡πä‡∏∞ ‡πÄ‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ß‡πà‡∏≤ property ‡πÑ‡∏´‡∏°‡∏ô‡∏∞)</li> <li>‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏≤ <code class="language-plaintext highlighter-rouge">impl Visitor</code> ‡πÉ‡∏´‡πâ‡∏°‡∏µ <code class="language-plaintext highlighter-rouge">new()</code> ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏™‡∏°‡∏∑‡∏≠‡∏ô <code class="language-plaintext highlighter-rouge">construct</code> ‡πÅ‡∏•‡∏∞ <code class="language-plaintext highlighter-rouge">fn greet_visitor()</code></li> </ul> <p>‡∏ó‡∏µ‡∏ô‡∏µ‡πâ‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ input ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏ô‡∏µ‡πà‡∏¢‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö <code class="language-plaintext highlighter-rouge">visitor_list</code> ‡πÑ‡∏´‡∏° ‡πÄ‡∏£‡∏≤‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ <code class="language-plaintext highlighter-rouge">for...in</code> ‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÉ‡∏ä‡πâ <code class="language-plaintext highlighter-rouge">iter</code> (iterator) ‡∏Å‡πá‡πÑ‡∏î‡πâ</p> <p>‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ <code class="language-plaintext highlighter-rouge">for...in</code> ‡πÄ‡∏ô‡∏µ‡πà‡∏¢ ‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏ó‡πà‡∏´‡πå ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏°‡∏≤‡∏Ñ‡∏≠‡∏¢‡πÄ‡∏ä‡πá‡∏Ñ ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥ <code class="language-plaintext highlighter-rouge">if...else</code> ‡πÉ‡∏ô‡∏•‡∏π‡∏õ‡∏î‡πâ‡∏ß‡∏¢</p> <p>‡πÄ‡∏£‡∏≤‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÉ‡∏ä‡πâ <code class="language-plaintext highlighter-rouge">iter</code> ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ ‡∏ã‡∏∂‡πà‡∏á iter ‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ô‡∏±‡πà‡∏ô‡πÅ‡∏´‡∏•‡∏∞ ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ <code class="language-plaintext highlighter-rouge">find</code> ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö Javascript ‡∏Ñ‡∏∑‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏´‡∏≤ item ‡∏ó‡∏µ‡πà‡∏°‡∏µ pattern ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î</p> <p>‡πÇ‡∏î‡∏¢ pattern ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡πÄ‡∏ô‡∏µ‡πà‡∏¢‡∏à‡∏∞‡πÉ‡∏ä‡πâ closure function <code class="language-plaintext highlighter-rouge">|visitor| visitor.name == name</code> ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Javascript ‡∏°‡∏±‡∏ô‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠ <code class="language-plaintext highlighter-rouge">(visitor) =&gt; visitor.name === name</code> ‡∏ô‡∏±‡πà‡∏ô‡πÄ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å <code class="language-plaintext highlighter-rouge">find</code> ‡∏Å‡πá‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÉ‡∏™‡πà‡∏•‡∏á‡πÑ‡∏õ‡πÉ‡∏ô <code class="language-plaintext highlighter-rouge">known_visitor</code></p> <p>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏°‡∏±‡∏ô‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡∏£‡∏á‡∏ó‡∏µ‡πà <code class="language-plaintext highlighter-rouge">find</code> ‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡πÄ‡∏õ‡πá‡∏ô <code class="language-plaintext highlighter-rouge">Option&lt;T&gt;</code> ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤ ‡∏°‡∏±‡∏ô‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠</p> <ul> <li><code class="language-plaintext highlighter-rouge">Some&lt;T&gt;</code> ‡∏´‡∏≤‡πÄ‡∏à‡∏≠</li> <li><code class="language-plaintext highlighter-rouge">None</code> ‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠</li> </ul> <p>‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å Javascript ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡πÄ‡∏õ‡πá‡∏ô type ‡∏Ç‡∏≠‡∏á item ‡∏´‡∏£‡∏∑‡∏≠ undefined (‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô null)</p> <p>‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö <code class="language-plaintext highlighter-rouge">known_visitor</code> ‡πÉ‡∏ô Rust ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ <code class="language-plaintext highlighter-rouge">if...else</code> ‡∏´‡∏£‡∏∑‡∏≠ <code class="language-plaintext highlighter-rouge">match</code> ‡∏Å‡πá‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ <code class="language-plaintext highlighter-rouge">match</code> ‡∏à‡∏∞‡∏î‡∏π‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Å‡∏ß‡πà‡∏≤ ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏•‡∏¢‡πÄ‡∏õ‡πá‡∏ô</p> <div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">match</span> <span class="n">known_visitor</span> <span class="p">{</span>
    <span class="nf">Some</span><span class="p">(</span><span class="n">visitor</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="n">visitor</span><span class="nf">.greet_visitor</span><span class="p">(),</span>
    <span class="nb">None</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"You are not on the visitor list. Please leave."</span><span class="p">),</span>
<span class="p">}</span>
</code></pre></div></div> <p>‡∏ã‡∏∂‡πà‡∏á‡∏Å‡πá‡∏à‡∏∞‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô <code class="language-plaintext highlighter-rouge">switch...case</code> ‡πÅ‡∏ï‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏°‡∏µ <code class="language-plaintext highlighter-rouge">match</code> ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ß‡πà‡∏≤ pattern matching ‡∏Ñ‡∏∑‡∏≠ ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô dynamic ‡∏î‡πâ‡∏ß‡∏¢ pattern ‡πÑ‡∏î‡πâ</p> <ul> <li><code class="language-plaintext highlighter-rouge">Some(visitor)</code> ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ <code class="language-plaintext highlighter-rouge">known_visitor</code> ‡∏°‡∏µ pattern ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô <code class="language-plaintext highlighter-rouge">Some(visitor)</code> ‡πÑ‡∏´‡∏° ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡πá‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠ ‡πÇ‡∏î‡∏¢‡πÄ‡∏≠‡∏≤ <code class="language-plaintext highlighter-rouge">visitor</code> ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</li> <li><code class="language-plaintext highlighter-rouge">None</code> ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ <code class="language-plaintext highlighter-rouge">known_visitor</code> ‡∏°‡∏µ pattern ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô <code class="language-plaintext highlighter-rouge">None</code> ‡πÑ‡∏´‡∏°</li> </ul> <p>‡∏ã‡∏∂‡πà‡∏á‡πÉ‡∏ô <code class="language-plaintext highlighter-rouge">switch...case</code> ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö static value ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß</p>]]></content><author><name></name></author><category term="etc"/><category term="rust"/><summary type="html"><![CDATA[We better use match, instead of if...else]]></summary></entry></feed>